@page "/image"

    <section class="section">
        <div class="columns">
            <div class="column is-8">
                <h3 class="title is-4">Load an image...</h3>
            </div>
            <div class="column is-4">
                <a href="https://github.com/jburman/BlazorLocalFilesExample/blob/master/Pages/Image.razor" target="_blank">View Source on GitHub <i class="oi oi-external-link"></i></a>
            </div>
        </div>

        <FileSelect @ref="imageFileSelect" Accept=".jpg,.jpeg,.png" FilesSelected="ImageFileSelectedHandler"></FileSelect>

        <div>
            <button class="button is-primary" @onclick="@SelectImageFile">Select Image</button>
        </div>
        @if (errorMessage != null)
        {

            <section class="notification is-warning">
                <button class="delete" @onclick="@CloseErrorAlert"></button>
                @errorMessage

            </section>
        }

        @if (imageFileUrl != null)
        {
            <hr />
            <div>
                <div style="margin: 10px;">
                    <img src="@imageFileUrl" style="width: 400px;" />
                </div>
                <div>
                    <h5>Load the image data into .NET</h5>
                    <button class="button is-primary" @onclick="@LoadSelectedImageFile">Load Image</button>
                </div>
                <div>
                    Is Loaded: @imageFile.IsLoaded
                </div>
                <div>
                    Loaded Size: @imageFile.LoadedSize
                </div>
            </div>
        }
    </section>

@code
{
    FileSelect imageFileSelect;

    LoadFile imageFile;
    string imageFileUrl;

    string errorMessage;

    void SelectImageFile()
    {
        ResetErrorState();

        // Trigger the file selection dialog
        imageFileSelect.SelectFiles();
    }

    // Shows how to use the blob file url directly for rendering.
    // LoadImageFile() below also loads the image's raw data directly into the .NET runtime.
    async Task ImageFileSelectedHandler(SelectedFile[] selectedFiles)
    {
        imageFile = new LoadFile()
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        try
        {
            // load the blob url and dispaly the image
            imageFileUrl = await imageFileSelect.GetFileBlobUrlAsync(imageFile.SelectedFile.Name);
            //StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    async Task LoadSelectedImageFile()
    {
        try
        {
            var imageData = await imageFileSelect.GetFileBytesAsync(imageFile.SelectedFile.Name);
            imageFile.IsLoaded = true;
            imageFile.LoadedSize = imageData.Length;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}

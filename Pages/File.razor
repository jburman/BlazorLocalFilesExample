@page "/file"

<section class="section">
    <h3 class="title is-4">Open one or more files...</h3>

    <FileSelect @ref="fileSelect" IsMultiple="true" FilesChanged="FilesChangedHandler"></FileSelect>

    <div>
        <button class="button is-primary" @onclick="SelectFiles">Select Files</button>
    </div>
    @if (errorMessage != null)
    {

        <section class="notification is-warning">
            <button class="delete" @onclick="@CloseErrorAlert"></button>
            @errorMessage

        </section>
    }


    @if (loadFiles != null)
    {
        <hr />
        <table class="table is-fullwidth">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Last Modified</th>
                    <th>Size</th>
                    <th>Is Loaded</th>
                    <th>Loaded Size</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in loadFiles)
                {
                    <tr>
                        <td>@file.SelectedFile.Name</td>
                        <td>@file.SelectedFile.LastModified.ToLocalTime()</td>
                        <td>@file.SelectedFile.Size</td>
                        <td>@file.IsLoaded</td>
                        <td>@file.LoadedSize</td>
                        <td><button class="button is-primary" @onclick="@(async () => await LoadSelectedFile(file))">Load File</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@code
{
    FileSelect fileSelect;

    LoadFile[] loadFiles;

    string errorMessage;

    void SelectFiles()
    {
        ResetErrorState();

        // Trigger the file selection dialog
        fileSelect.SelectFiles();
    }

    Task FilesChangedHandler(FileSelectChangeArgs args)
    {
        // Store the loaded state about each file (files are lazy loaded into .NET process on demand)
        loadFiles = args.Files.Select(file => new LoadFile()
        {
            SelectedFile = file,
            IsLoaded = false,
            LoadedSize = 0
        }).ToArray();

        return Task.CompletedTask;
    }

    async Task LoadSelectedFile(LoadFile file)
    {
        try
        {
            using (var fileStream = await fileSelect.OpenFileStreamAsync(file.SelectedFile.Name))
            {
                var buffer = new System.IO.MemoryStream();
                await fileStream.CopyToAsync(buffer);
                file.IsLoaded = true;
                file.LoadedSize = (int)buffer.Length;
            }
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}
